name: Web Deploy to IPFS

on:
  # schedule:
  #   - cron: "0 * * * *" # Runs every hour
  workflow_dispatch: # Allows manual triggering

jobs:
  ## Check if a new release of safe-wallet-monorepo is available
  ## Outputs:
  ## - new_release: true if a new release is available, false otherwise
  ## - latest_tag: the tag of the latest release
  ## - tar_url: the URL of the tarball of the latest release
  ## - checksum_url: the URL of the checksum of the latest release
  check-release:
    runs-on: ubuntu-latest
    name: Check for new release
    outputs:
      new_release: ${{ steps.compare.outputs.new_release }}
      latest_tag: ${{ steps.get_release.outputs.latest_tag }}
      tar_url: ${{ steps.get_release.outputs.tar_url }}
      checksum_url: ${{ steps.get_release.outputs.checksum_url }}
    steps:
      - name: Get latest release info
        id: latest_release
        run: |
          API_URL="https://api.github.com/repos/safe-global/safe-wallet-monorepo/releases/latest"
          RELEASE_INFO=$(curl -s $API_URL)
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          TAR_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".tar.gz")) | .browser_download_url')
          CHECKSUM_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith("-sha256-checksum.txt")) | .browser_download_url')

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "TAR_URL=$TAR_URL" >> $GITHUB_ENV
          echo "CHECKSUM_URL=$CHECKSUM_URL" >> $GITHUB_ENV

          echo "latest_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "tar_url=$TAR_URL" >> $GITHUB_OUTPUT
          echo "checksum_url=$CHECKSUM_URL" >> $GITHUB_OUTPUT

      - name: Compare with Stored Tag (.prev_release)
        id: compare
        run: |
          PREV_TAG_NAME=$(cat .prev_release 2>/dev/null || echo "none")
          echo "Previous tag: $PREV_TAG_NAME"

          if [ "$TAG_NAME" != "null" ] && [ "$TAG_NAME" != "$PREV_TAG_NAME" ]; then
            echo "New release detected :: $TAG_NAME"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "$TAG_NAME" > .prev_release
          else
            echo "No new release detected"
            echo "new_release=false" >> $GITHUB_OUTPUT

      - name: Cache Last Release Tag
        id: cache-last-release-tag
        uses: actions/cache@v4
        with:
          path: .prev_release
          key: latest-release-${{ env.TAG_NAME }}

  ## Deploy the web app to IPFS
  deploy:
    runs-on: ubuntu-latest
    needs: check-release
    if: ${{ needs.check-release.outputs.new_release }} == 'true'

    # permissions:
    #   contents: read
    #   statuses: write
    #   checks: write
    #   pull-requests: write

    name: Deploy to IPFS

    steps:
      - name: Download Tarball and Checksum
        run: |
          curl -L "${{ needs.check-release.outputs.tar_url }}" -o /tmp/release.tar.gz
          curl -L "${{ needs.check-release.outputs.checksum_url }}" -o /tmp/checksum.txt

      - name: Verify Checksum
        run: |
          CHECKSUM_EXPECTED=$(cat /tmp/checksum.txt | awk '{print $1}')
          CHECKSUM_ACTUAL=$(sha256sum /tmp/release.tar.gz | awk '{print $1}')

          if [ "$CHECKSUM_EXPECTED" != "$CHECKSUM_ACTUAL" ]; then
            echo "Checksum verification failed!" >&2
            exit 1
          fi

      - name: Extract Tarball
        run: |
          mkdir -p /tmp/release
          tar -xzf /tmp/release.tar.gz -C /tmp/release
          echo "Extracted files:"
          ls -lah /tmp/release

      # - name: Deploy to IPFS
      #   uses: ipfs/ipfs-deploy-action@v1
      #   id: deploy
      #   with:
      #     path-to-deploy: /tmp/release
      #     storacha-key: ${{ secrets.STORACHA_KEY }}
      #     storacha-proof: ${{ secrets.STORACHA_PROOF }}
      #     pinata-jwt-token: ${{ secrets.PINATA_JWT }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
